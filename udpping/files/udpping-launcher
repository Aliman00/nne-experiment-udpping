#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# =================================================================
#          #     #                 #     #
#          ##    #   ####   #####  ##    #  ######   #####
#          # #   #  #    #  #    # # #   #  #          #
#          #  #  #  #    #  #    # #  #  #  #####      #
#          #   # #  #    #  #####  #   # #  #          #
#          #    ##  #    #  #   #  #    ##  #          #
#          #     #   ####   #    # #     #  ######     #
#
#       ---   The NorNet Testbed for Multi-Homed Systems  ---
#                       https://www.nntb.no
# =================================================================
#
# Container-based UDPPing Launcher for NorNet Edge
#
# Copyright (C) 2018-2019 by Thomas Dreibholz
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
# Contact: dreibh@simula.no


import json
import sys
import subprocess
import zmq


NODEID_FILE = '/nodeid'


# ====== Check node ID ======================================================
try:
   nodeIDFile = open(NODEID_FILE)
   nodeID = int(nodeIDFile.read())
except:
   sys.stderr.write('Unable to read node ID from ' + NODEID_FILE + '!\n')
   sys.exit(1)


# ====== Initialise ZeroMQ metadata stream ==================================
context = zmq.Context()
socket = context.socket(zmq.SUB)
socket.connect ("tcp://172.17.0.1:5556")
socket.setsockopt_string(zmq.SUBSCRIBE, 'MONROE.META.DEVICE.MODEM')


# ====== Start instances ====================================================
processes = {}
while True:
   # ------ Read metadata ---------------------------------------------------
   data = socket.recv().decode('utf-8').split(' ', 1)
   try:
      topic    = data[0]
      metadata = json.loads(data[1])
   except Exception as e:
      sys.stderr.write('WARNING: Cannot read metadata: ' + str(e) + '\n')
      topic    = None
      metadata = None

   # ------ Extract ICCID and InternalInterface -----------------------------
   if topic.startswith('MONROE.META.DEVICE.MODEM'):
      try:
         iccid = metadata['ICCID']
         intIF = metadata['InternalInterface']
         mccmnc = str(metadata['IMSIMCCMNC'])
         mcc    = int(mccmnc[0:3])
         mnc    = int(mccmnc[3:])
      except Exception as e:
         sys.stderr.write('WARNING: Cannot read MONROE.META.DEVICE.MODEM: ' + str(e) + '\n')
         iccid = None
         intIF = None
         mcc   = None
         mnc   = None

   # ------ Try to start instance, if not yet started -----------------------
   if iccid != None:
      if iccid in processes:
         if processes[iccid].joinable():
            processes[iccid].join()
            processes[iccid].remove(iccid)
            sys.stderr.write('WARNING: Instance for ICCID ' + iccid + ' has stopped!\n')

      if not iccid in processes:
         iccid      = instance['iccid']
         identifier = '%03d:%02d'.format(mcc, mnc)

         print('Starting instance ' + str(measurementID) + ' on ' + intIF + ' ...')
         processes[iccid] = subprocess.Popen([ '/opt/monroe/udpping', '-i', str(identifier),
                                                                      '-I', intIF ])
         sys.stderr.write('Started instance for ICCID ' + iccid + '\n')
