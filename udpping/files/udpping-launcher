#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# =================================================================
#          #     #                 #     #
#          ##    #   ####   #####  ##    #  ######   #####
#          # #   #  #    #  #    # # #   #  #          #
#          #  #  #  #    #  #    # #  #  #  #####      #
#          #   # #  #    #  #####  #   # #  #          #
#          #    ##  #    #  #   #  #    ##  #          #
#          #     #   ####   #    # #     #  ######     #
#
#       ---   The NorNet Testbed for Multi-Homed Systems  ---
#                       https://www.nntb.no
# =================================================================
#
# Container-based UDPPing Launcher for NorNet Edge
#
# Copyright (C) 2018-2019 by Thomas Dreibholz
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
# Contact: dreibh@simula.no


import json
import sys
import subprocess
import zmq


NODEID_FILE          = '/nodeid'
CONFIG_FILE          = '/monroe/config'
LSYNCD_CONFIG_FILE   = '/etc/lsyncd/lsyncd.conf.lua'
LSYNCD_IDENTITY_FILE = '/etc/lsyncd/id_lsyncd.pub'


# ====== Check node ID ======================================================
try:
   nodeIDFile = open(NODEID_FILE)
   nodeID = int(nodeIDFile.read())
except:
   sys.stderr.write('Unable to read node ID from ' + NODEID_FILE + '!\n')
   sys.exit(1)


# ====== Read configuration file ============================================
try:
   configurationFile = open(CONFIG_FILE)
   configuration = json.load(configurationFile)
except:
   sys.stderr.write('Unable to read configuration from ' + CONFIG_FILE + '!\n')
   sys.exit(1)

try:
   myNodeID     = int(configuration['node_id'])
   instances    = configuration['instances']
   syncServer   = configuration['sync_server']
   syncIdentity = configuration['sync_identity']
   for instance in instances:
      measurementID = int(instance['measurement_id'])
      iccid         = instance['iccid']
      networkID     = int(instance['network_id'])
except:
   sys.stderr.write('Invalid or incomplete configuration in ' + CONFIG_FILE + '!\n')
   sys.exit(1)

if myNodeID != nodeID:
   sys.stderr.write('Configuration seems to be for different node: ' + \
                    str(nodeID) + ' != ' + str(myNodeID) + '!\n')
   sys.exit(1)


# ====== Configure lsyncd ===================================================
lsyncdidentity = open(LSYNCD_IDENTITY_FILE, 'w')
lsyncdidentity.write(syncIdentity + '\n')
lsyncdidentity.close()

lsyncdconf = open(LSYNCD_CONFIG_FILE, 'w')
lsyncdconf.write(
"""
settings {
   logfile        = "/var/log/lsyncd.log",
   statusFile     = "/var/log/lsyncd.status",
   insist         = true,
   log            = "scarce",
   statusInterval = 60
}

sync {
   default.rsync,
   source    = "/monroe/results/data/",
   target    = """ + '"nne@' + syncServer + ':/nne/data/' + str(nodeID) + '"' + """,
   delete    = false,
   exclude   = { "/*.dat", "/*.sdat", "/.*" },
   maxDelays = 15,
   rsync = {
      archive  = true,
      compress = true,
      rsh      = "/usr/bin/ssh -p22 -i""" + LSYNCD_IDENTITY_FILE + """ -oVerifyHostKeyDNS=yes -oStrictHostKeyChecking=no -oPasswordAuthentication=no",
      _extra   = { "--remove-source-files" }
   }
}
""")
lsyncdconf.close()

subprocess.call(['service', 'lsyncd', 'stop'])
subprocess.call(['mkdir', '-p', '/monroe/results/data/'])
subprocess.call(['service', 'lsyncd', 'start'])


# ====== Initialise ZeroMQ metadata stream ==================================
context = zmq.Context()
socket = context.socket(zmq.SUB)
socket.connect ("tcp://172.17.0.1:5556")
socket.setsockopt_string(zmq.SUBSCRIBE, 'MONROE.META.DEVICE.MODEM')


# ====== Start instances ====================================================
processes = []
while len(instances) > 0:
   # ------ Read metadata ---------------------------------------------------
   data = socket.recv().decode('utf-8').split(' ', 1)
   try:
      topic    = data[0]
      metadata = json.loads(data[1])
   except Exception as e:
      sys.stderr.write('WARNING: Cannot read metadata: ' + str(e) + '\n')
      topic    = None
      metadata = None

   # ------ Extract ICCID and InternalInterface -----------------------------
   if topic.startswith('MONROE.META.DEVICE.MODEM'):
      try:
         iccid = metadata['ICCID']
         intIF = metadata['InternalInterface']
      except Exception as e:
         sys.stderr.write('WARNING: Cannot read MONROE.META.DEVICE.MODEM: ' + str(e) + '\n')
         iccid = None
         intIF = None

   # ------ Try to start instance, if not yet started -----------------------
   if iccid != None:
      for instance in instances:
         if iccid == instance['iccid']:
            measurementID = int(instance['measurement_id'])
            iccid         = instance['iccid']
            networkID     = int(instance['network_id'])

            print('Starting instance ' + str(measurementID) + ' on ' + intIF + ' ...')
            process = subprocess.Popen([ '/opt/monroe/udpping', '-i', str(measurementID),
                                                               '-N', str(networkID),
                                                               '-I', intIF ])
            processes.append(process)

            instances.remove(instance)
            break


print('Waiting ...')
for process in processes:
   process.wait()
print('Finished!')
