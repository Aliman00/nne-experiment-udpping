#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# =================================================================
#          #     #                 #     #
#          ##    #   ####   #####  ##    #  ######   #####
#          # #   #  #    #  #    # # #   #  #          #
#          #  #  #  #    #  #    # #  #  #  #####      #
#          #   # #  #    #  #####  #   # #  #          #
#          #    ##  #    #  #   #  #    ##  #          #
#          #     #   ####   #    # #     #  ######     #
#
#       ---   The NorNet Testbed for Multi-Homed Systems  ---
#                       https://www.nntb.no
# =================================================================
#
# Container-based UDPPing Launcher for NorNet Edge
#
# Copyright (C) 2018-2019 by Thomas Dreibholz
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
# Contact: dreibh@simula.no


import zmq
import sys
import json

# ====== Initialise ZeroMQ metadata stream ==================================
context = zmq.Context()
socket = context.socket(zmq.SUB)
socket.connect ("tcp://172.17.0.1:5556")
socket.setsockopt_string(zmq.SUBSCRIBE, 'MONROE.META.DEVICE.MODEM')

instances = [ {'iccid':                 '1234', 'measurement_id': 10000 },
              {'iccid': '89470000160401348264', 'measurement_id': 10001 },
              {'iccid': '89470715000003314007', 'measurement_id': 10002 },
              {'iccid': '8947080037001158277',  'measurement_id': 10003 }
            ]

while len(instances) > 0:
   data = socket.recv().decode('utf-8').split(' ', 1)
   try:
      topic    = data[0]
      metadata = json.loads(data[1])
      print(topic)
      print(metadata)
      sys.stdout.flush()
   except Exception as e:
      sys.stderr.write('WARNING: Cannot read metadata: ' + str(e) + '\n')
      topic    = None
      metadata = None

   if topic.startswith('MONROE.META.DEVICE.MODEM'):
      try:
         iccid = metadata['ICCID']
         intIF = metadata['InternalInterface']
      except Exception as e:
         sys.stderr.write('WARNING: Cannot read MONROE.META.DEVICE.MODEM: ' + str(e) + '\n')
         iccid = None
         intIF = None

   if iccid != None:
      print('ESSID=', iccid)
      for instance in instances:
         if iccid == instance['iccid']:
            print('Starting instance ' + str(instance['measurement_id']) + ' on ' + intIF)
            instances.remove(instance)
            break

   print(len(instances))
