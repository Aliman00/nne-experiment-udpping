#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# =================================================================
#          #     #                 #     #
#          ##    #   ####   #####  ##    #  ######   #####
#          # #   #  #    #  #    # # #   #  #          #
#          #  #  #  #    #  #    # #  #  #  #####      #
#          #   # #  #    #  #####  #   # #  #          #
#          #    ##  #    #  #   #  #    ##  #          #
#          #     #   ####   #    # #     #  ######     #
#
#       ---   The NorNet Testbed for Multi-Homed Systems  ---
#                       https://www.nntb.no
# =================================================================
#
# Container-based UDPPing Launcher for NorNet Edge
#
# Copyright (C) 2018-2019 by Thomas Dreibholz
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
# Contact: dreibh@simula.no


import argparse
import bz2
import json
import logging
import logging.config
import re
import signal
import os
import sys
import threading
import time
import zmq


# ###### Constants ##########################################################
NODEID_FILE     = '/nodeid'

LOG_DIRECTORY   = '/tmp/monroe/results/log'
DATA_DIRECTORY  = '/tmp/monroe/results/data'


# ###### Global variables ###################################################
running          = True
compress         = True
iccidToNetworkID = {}


# ###### Signal handler #####################################################
def signalHandler(signum, frame):
   global running
   running = False


# ###### Compressing log rotator ############################################
def CompressingRotator(source, dest):
   os.rename(source, dest)
   f_in = open(dest, 'rb')
   f_out = bz2.BZ2File("%s.bz2" % dest, 'wb')
   f_out.writelines(f_in)
   f_out.close()
   f_in.close()
   os.remove(dest)



# ###### Main program #######################################################

# ====== Handle arguments ===================================================
ap = argparse.ArgumentParser(description='Metadata Collector for NorNet Edge')
ap.add_argument('mappings', type=str, nargs='+', help='Set network identifier to ICCID mapping')
ap.add_argument('-u', '--uncompressed', help='Turn off results compression', action="store_true", default = False)
options = ap.parse_args()

if options.uncompressed == True:
   compress = False

for mapping in options.mappings:
   try:
      opt = mapping.split(':')
      networkID = int(opt[0])
      iccid     = opt[1]
   except Exception as e:
      sys.stderr.write('Bad mapping: ' + mapping + '!\n')
      sys.exit(1)

   print('Mapping: ' + iccid + ' -> ' + str(networkID) + ' ' + str(len(iccid)))
   if not re.match(r'^[0-9]{19,20}$', iccid):
      sys.stderr.write('WARNING: Probably bad ICCID ' + iccid + '!\n')


# ====== Make sure the output directories exist =============================
for directory in [ LOG_DIRECTORY, DATA_DIRECTORY ]:
   try:
      os.makedirs(directory, 0o755, True)
   except Exception as e:
      sys.stderr.write('ERROR: Unable to create directory ' + directory + ': ' +
                       str(e) + '\n')
      sys.exit(1)


# ====== Initialise logger ==================================================
MBBM_LOGGING_CONF = {
   'version': 1,
   'handlers': {
      'default': {
         'level': 'DEBUG',
         'class': 'logging.handlers.TimedRotatingFileHandler',
         'formatter': 'standard',
         'filename': LOG_DIRECTORY + '/metadatacollector.log',
         'when': 'D'
      },
      'mbbm': {
         'level': 'DEBUG',
         'class': 'logging.handlers.TimedRotatingFileHandler',
         'formatter': 'mbbm',
         'filename': DATA_DIRECTORY + '/metadatacollector.dat',
         'when': 'S',
         'interval': 15,
      }
   },
   'formatters': {
      'standard': {
         'format': '%(asctime)s %(levelname)s [PID=%(process)d] %(message)s'
      },
      'mbbm': {
         'format': '%(message)s',
      }
   },
   'loggers': {
      'mbbm': {
         'handlers': ['mbbm'],
         'level': 'DEBUG',
         'propagate': False,
      }
   },
   'root': {
      'level': 'DEBUG',
      'handlers': ['default'],
   }
}

logging.config.dictConfig(MBBM_LOGGING_CONF)
mlogger = logging.getLogger('mbbm')
if compress == True:
   for loghandler in mlogger.handlers[:]:
      loghandler.rotator = CompressingRotator


# ====== Initialise ZeroMQ metadata stream ==================================
context = zmq.Context()
zmqSocket = context.socket(zmq.SUB)
zmqSocket.connect ("tcp://172.17.0.1:5556")
zmqSocket.setsockopt_string(zmq.SUBSCRIBE, 'MONROE.META.DEVICE.MODEM')
poller = zmq.Poller()
poller.register(zmqSocket, zmq.POLLIN)


# ====== Initialise signal handlers =========================================
signal.signal(signal.SIGINT,  signalHandler)
signal.signal(signal.SIGTERM, signalHandler)


# ====== Main loop ==========================================================
logging.debug("Starting")

while running == True:
   pollResult = poller.poll(1000)
   if zmqSocket in pollResult and pollResult[zmqSocket] == zmq.POLLIN:
      try:
         data = zmqSocket.recv().decode('utf-8').split(' ', 1)
         topic    = data[0]
         metadata = json.loads(data[1])
         print(topic)
         print(metadata)
         sys.stdout.flush()
      except Exception as e:
         logging.warning('Cannot read metadata: ' + str(e))
         topic    = None
         metadata = None

      if (topic != None) and (topic.startswith('MONROE.META.DEVICE.MODEM')):
         try:
            iccid = metadata['ICCID']
            intIF = metadata['InternalInterface']
         except Exception as e:
            logging.warning('Cannot read MONROE.META.DEVICE.MODEM: ' + str(e))
            iccid = None
            intIF = None

         if iccid != None:
            print('ESSID=', iccid)
            for instance in instances:
               if iccid == instance['iccid']:
                  print('Starting instance ' + str(instance['measurement_id']) + ' on ' + intIF)
                  instances.remove(instance)
                  break

logging.debug("Stopping")
